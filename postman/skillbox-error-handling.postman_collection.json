{
	"info": {
		"_postman_id": "6dafdf7d-1093-4a93-bb76-2bad9f0ba8f5",
		"name": "skillbox-error-handling",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "theory",
			"item": [
				{
					"name": "200/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "500/Firewall-ErrorReportValve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Firewall exception returns 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "500/read-ExceptionHandler",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Read and return 500. SqlDataExceptionWrapperException\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host}}/read/?id=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"read",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "302/delete-ControllerAdvice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete wothout aprropriate permissions and return 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{host}}/delete?id=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"delete"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "500/update-ResponseStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update and return 500. SqlExceptionWrapperException\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "value",
									"value": "Mickey",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/update/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"update",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "415/create-DefaultExceptionHandlerResolver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create is 415 Unsupported Media Type\", function () {",
									"    pm.response.to.have.status(415);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "value",
									"value": "Mickey",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "503/create-CustomExceptionHandlerResolver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create is 503 CommonDatabaseException\", function () {",
									"    pm.response.to.have.status(503);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "value",
									"value": "Mickey",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "404/not_found-NotExceptionalCase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "value",
									"value": "Mickey",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/not_found",
							"host": [
								"{{host}}"
							],
							"path": [
								"not_found"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "practice",
			"item": [
				{
					"name": "500/Firewall-ErrorReportValve",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host}}",
							"host": [
								"{{host}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "500/read-ExceptionHandler is higher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Read and return 500. SqlDataExceptionWrapperException\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host}}/read/?id=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"read",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400/read-ConstraintViolationException",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Read and return 400. ConstraintViolationException\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host}}/read/?id=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"read",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "302/delete-ControllerAdvice with higher order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete without aprropriate permissions and return 500. AccessDeniedException\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{host}}/delete?id=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"delete"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "500/update-suppress ResponseStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update and return 500. SqlExceptionWrapperException\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "value",
									"value": "Mickey",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/update/1",
							"host": [
								"{{host}}"
							],
							"path": [
								"update",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "500/create-intercept DefaultExceptionHandlerResolver",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create and return 415 Unsupported Media Type\", function () {",
									"    pm.response.to.have.status(415);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "value",
									"value": "Mickey",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "500/create_MediaTypeNotSupported",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create and return 415 if errors.handling.enabled: false and 500 elsewere\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/create",
							"host": [
								"{{host}}"
							],
							"path": [
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "404/not_found-NotExceptionalCase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "user",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "value",
									"value": "Mickey",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/not_found",
							"host": [
								"{{host}}"
							],
							"path": [
								"not_found"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}